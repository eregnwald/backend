// src/auth/auth.service.ts
import { Injectable, UnauthorizedException } from '@nestjs/common';
import { UsersService } from '../users/users.service';
import * as bcrypt from 'bcryptjs';
import { JwtService } from '@nestjs/jwt';



@Injectable()
export class AuthService {
  constructor(
    private usersService: UsersService,
    private jwtService: JwtService,
  ) {}

  async validateUser(email: string, password: string): Promise<any> {
    // ‚ùó –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ findByEmail(), –∫–æ—Ç–æ—Ä—ã–π –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–æ–ª–∏
    const user = await this.usersService.findByEmail(email);

    if (user && (await bcrypt.compare(password, user.password_hash))) {
      const { password_hash, ...result } = user;
      return result;
    }

    throw new UnauthorizedException('–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
  }

  async login(user: any) {
  console.log('Raw User:', JSON.stringify(user, null, 2)); // üëà –ü–æ—Å–º–æ—Ç—Ä–∏, –µ—Å—Ç—å –ª–∏ role
  console.log('User Roles:', user.userRoles); // üëà –ü–æ—Å–º–æ—Ç—Ä–∏, –µ—Å—Ç—å –ª–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ä–æ–ª–∏

    const payload = {
      email: user.email,
      sub: user.user_id,
      first_name: user.first_name,
      roles: user.userRoles?.map((ur) => ur.role.role_name), // ‚úÖ –ü–æ–ª—É—á–∞–µ–º role_name
    };

    console.log('JWT Payload:', JSON.stringify(payload, null, 2)); // üëà –ü—Ä–æ–≤–µ—Ä—å –≤ –∫–æ–Ω—Å–æ–ª–∏

    return {
      access_token: this.jwtService.sign(payload),
    };
  }
}