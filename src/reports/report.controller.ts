import { Controller, Get, Res, Query } from '@nestjs/common';
import { Response } from 'express';
import { ReportService } from './report.service';

@Controller('reports')
export class ReportController {
  constructor(private readonly reportService: ReportService) {}

  // üìä –í–æ—Ä–æ–Ω–∫–∞ –ø—Ä–æ–¥–∞–∂
  @Get('funnel')
  async getFunnelReport(
    @Query('funnel_id') funnel_id: string,
    @Query('period') period: string,
    @Query('startDate') startDate?: string,
    @Query('endDate') endDate?: string,
  ) {
    const parsedStartDate = startDate ? new Date(startDate) : undefined;
    const parsedEndDate = endDate ? new Date(endDate) : undefined;

    return this.reportService.getFunnelData(
      funnel_id ? +funnel_id : 25,
      period,
      parsedStartDate && parsedEndDate ? { startDate: parsedStartDate, endDate: parsedEndDate } : undefined
    );
  }

  // üë• –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
  @Get('performance')
  async getOwnerPerformance(
    @Query('funnel_id') funnel_id: string,
    @Query('period') period: string,
    @Query('startDate') startDate?: string,
    @Query('endDate') endDate?: string,
  ) {
    const parsedStartDate = startDate ? new Date(startDate) : undefined;
    const parsedEndDate = endDate ? new Date(endDate) : undefined;

    return this.reportService.getOwnerPerformance(
      funnel_id ? +funnel_id : 25,
      period,
      parsedStartDate && parsedEndDate ? { startDate: parsedStartDate, endDate: parsedEndDate } : undefined
    );
  }

  // üí∞ –û—Ç—á–µ—Ç –ø–æ –¥–æ—Ö–æ–¥—É
  @Get('revenue')
  async getRevenueReport(
    @Query('funnel_id') funnel_id: string,
    @Query('period') period: string,
    @Query('startDate') startDate?: string,
    @Query('endDate') endDate?: string,
  ) {
    const parsedStartDate = startDate ? new Date(startDate) : undefined;
    const parsedEndDate = endDate ? new Date(endDate) : undefined;

    return this.reportService.getRevenueReport(
      funnel_id ? +funnel_id : 25,
      period,
      parsedStartDate && parsedEndDate ? { startDate: parsedStartDate, endDate: parsedEndDate } : undefined
    );
  }

  // üìà –î–∏–Ω–∞–º–∏–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–æ–∫
  @Get('deal-trend')
  async getDealTrendReport(
    @Query('funnel_id') funnel_id: string,
    @Query('period') period: 'day' | 'week' | 'month' = 'month',
    @Query('startDate') startDate?: string,
    @Query('endDate') endDate?: string,
  ) {
    const parsedStartDate = startDate ? new Date(startDate) : undefined;
    const parsedEndDate = endDate ? new Date(endDate) : undefined;

    return this.reportService.getDealActivityTrend(
      funnel_id ? +funnel_id : 25,
      period,
      parsedStartDate && parsedEndDate ? { startDate: parsedStartDate, endDate: parsedEndDate } : undefined
    );
  }

  // üìä –≠–∫—Å–ø–æ—Ä—Ç –≤–æ—Ä–æ–Ω–∫–∏
  @Get('export/funnel')
  async exportFunnelToExcel(
    @Res({ passthrough: true }) res: Response,
    @Query('funnel_id') funnel_id: string,
    @Query('period') period: string,
    @Query('startDate') startDate?: string,
    @Query('endDate') endDate?: string,
  ) {
    const parsedStartDate = startDate ? new Date(startDate) : undefined;
    const parsedEndDate = endDate ? new Date(endDate) : undefined;

    const buffer = await this.reportService.exportFunnelSheet(
      funnel_id ? +funnel_id : 25,
      period,
      parsedStartDate && parsedEndDate ? { startDate: parsedStartDate, endDate: parsedEndDate } : undefined
    );

    const periodLabel = this.getCustomPeriodLabel(parsedStartDate, parsedEndDate, period);
    const filename = encodeURIComponent(`–í–æ—Ä–æ–Ω–∫–∞_${periodLabel}_${this.getTodayDate()}.xlsx`);

    res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
    res.setHeader(
      'Content-Disposition',
      `attachment; filename=${filename}; filename*=UTF-8''${filename}`,
    );

    return res.send(buffer);
  }

  // üë• –≠–∫—Å–ø–æ—Ä—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  @Get('export/performance')
  async exportPerformanceToExcel(
    @Res({ passthrough: true }) res: Response,
    @Query('funnel_id') funnel_id: string,
    @Query('period') period: string,
    @Query('startDate') startDate?: string,
    @Query('endDate') endDate?: string,
  ) {
    const parsedStartDate = startDate ? new Date(startDate) : undefined;
    const parsedEndDate = endDate ? new Date(endDate) : undefined;

    const buffer = await this.reportService.exportPerformanceSheet(
      funnel_id ? +funnel_id : 25,
      period,
      parsedStartDate && parsedEndDate ? { startDate: parsedStartDate, endDate: parsedEndDate } : undefined
    );

    const periodLabel = this.getCustomPeriodLabel(parsedStartDate, parsedEndDate, period);
    const filename = encodeURIComponent(`–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å_${periodLabel}_${this.getTodayDate()}.xlsx`);

    res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
    res.setHeader(
      'Content-Disposition',
      `attachment; filename=${filename}; filename*=UTF-8''${filename}`,
    );

    return res.send(buffer);
  }

  // üí∞ –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á—ë—Ç–∞ –ø–æ –¥–æ—Ö–æ–¥—É
  @Get('export/revenue')
  async exportRevenueReport(
    @Res({ passthrough: true }) res: Response,
    @Query('funnel_id') funnel_id: string,
    @Query('period') period: string,
    @Query('startDate') startDate?: string,
    @Query('endDate') endDate?: string,
  ) {
    const parsedStartDate = startDate ? new Date(startDate) : undefined;
    const parsedEndDate = endDate ? new Date(endDate) : undefined;

    const buffer = await this.reportService.exportRevenueReportToExcel(
      funnel_id ? +funnel_id : 25,
      period,
      parsedStartDate && parsedEndDate ? { startDate: parsedStartDate, endDate: parsedEndDate } : undefined
    );

    const periodLabel = this.getCustomPeriodLabel(parsedStartDate, parsedEndDate, period);
    const filename = encodeURIComponent(`–û—Ç—á–µ—Ç_–ø–æ_–¥–æ—Ö–æ–¥—É_${periodLabel}_${this.getTodayDate()}.xlsx`);

    res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
    res.setHeader(
      'Content-Disposition',
      `attachment; filename=${filename}; filename*=UTF-8''${filename}`,
    );

    return res.send(buffer);
  }

  // üìà –≠–∫—Å–ø–æ—Ä—Ç –¥–∏–Ω–∞–º–∏–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–æ–∫
  @Get('export/deal-trend')
  async exportDealTrendToExcel(
    @Res({ passthrough: true }) res: Response,
    @Query('funnel_id') funnel_id: string,
    @Query('period') period: string,
    @Query('startDate') startDate?: string,
    @Query('endDate') endDate?: string,
  ) {
    const parsedStartDate = startDate ? new Date(startDate) : undefined;
    const parsedEndDate = endDate ? new Date(endDate) : undefined;

    const buffer = await this.reportService.exportDealActivityToExcel(
      funnel_id ? +funnel_id : 25,
      period,
      parsedStartDate && parsedEndDate ? { startDate: parsedStartDate, endDate: parsedEndDate } : undefined
    );

    const periodLabel = this.getCustomPeriodLabel(parsedStartDate, parsedEndDate, period);
    const filename = encodeURIComponent(`–î–∏–Ω–∞–º–∏–∫–∞_–∑–∞–∫—Ä—ã—Ç–∏–π_${periodLabel}_${this.getTodayDate()}.xlsx`);

    res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
    res.setHeader(
      'Content-Disposition',
      `attachment; filename=${filename}; filename*=UTF-8''${filename}`,
    );

    return res.send(buffer);
  }

  // üõ†Ô∏è –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

  private getTodayDate(): string {
    const today = new Date();
    return today.toISOString().slice(0, 10);
  }

  private getCustomPeriodLabel(
    startDate: Date | undefined,
    endDate: Date | undefined,
    period: string
  ): string {
    if (!startDate || !endDate) {
      return this.getPeriodLabel(period);
    }
    return `—Å_${startDate.toISOString().slice(0, 10)}_–ø–æ_${endDate.toISOString().slice(0, 10)}`;
  }

  private getPeriodLabel(period: string): string {
    const today = new Date();
    const year = today.getFullYear();
    const monthNames = [
      '—è–Ω–≤–∞—Ä—å', '—Ñ–µ–≤—Ä–∞–ª—å', '–º–∞—Ä—Ç', '–∞–ø—Ä–µ–ª—å', '–º–∞–π', '–∏—é–Ω—å',
      '–∏—é–ª—å', '–∞–≤–≥—É—Å—Ç', '—Å–µ–Ω—Ç—è–±—Ä—å', '–æ–∫—Ç—è–±—Ä—å', '–Ω–æ—è–±—Ä—å', '–¥–µ–∫–∞–±—Ä—å'
    ];
    const currentMonth = monthNames[today.getMonth()];
    const quarter = Math.floor(today.getMonth() / 3) + 1;

    switch (period) {
      case 'day':
        return `–¥–µ–Ω—å_${today.getDate()}-${today.getMonth() + 1}-${year}`;
      case 'week': {
        const weekNum = this.getWeekNumber(today);
        return `–Ω–µ–¥–µ–ª—è_W${weekNum}_${year}`;
      }
      case 'month':
        return `–º–µ—Å—è—Ü_${currentMonth}_${year}`;
      case 'quarter':
        return `–∫–≤–∞—Ä—Ç–∞–ª_Q${quarter}_${year}`;
      case 'year':
        return `–≥–æ–¥_${year}`;
      default:
        return `–ø–µ—Ä–∏–æ–¥_–Ω–µ_—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`;
    }
  }

  private getWeekNumber(date: Date): number {
    const tempDate = new Date(date.getTime());
    tempDate.setHours(0, 0, 0, 0);
    const dayOfWeek = tempDate.getDay() || 7;
    tempDate.setDate(tempDate.getDate() + 4 - dayOfWeek);
    const startOfYear = new Date(tempDate.getFullYear(), 0, 1);
    const diff = tempDate.getTime() - startOfYear.getTime();
    return Math.floor(diff / (1000 * 60 * 60 * 24 * 7)) + 1;
  }
}