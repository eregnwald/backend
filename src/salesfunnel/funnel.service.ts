import { Injectable, OnModuleInit } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { SalesFunnel } from './funnel.entity';
import { SalesFunnelStage } from '../salesfunnelstages/funnel-stage.entity';
import { SalesFunnelStagesService } from '../salesfunnelstages/funnel-stage.service';
import { CreateFunnelDto } from './dto/create-funnel.dto';

@Injectable()
export class SalesFunnelsService implements OnModuleInit {
  constructor(
    @InjectRepository(SalesFunnel)
    private readonly funnelRepository: Repository<SalesFunnel>,

    @InjectRepository(SalesFunnelStage)
    private readonly funnelStageRepository: Repository<SalesFunnelStage>,

    private readonly funnelStageService: SalesFunnelStagesService,
  ) {}

  async onModuleInit() {
    // üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—â–µ–π –≤–æ—Ä–æ–Ω–∫–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    await this.getDefaultSharedFunnel().catch((err) => {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—â–µ–π –≤–æ—Ä–æ–Ω–∫–∏:', err);
    });
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤–æ—Ä–æ–Ω–∫—É —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é)
   */
  async getCurrentUserFunnel(owner_id: number): Promise<SalesFunnel> {
    const existing = await this.funnelRepository.findOneBy({ owner_id });

    if (existing) {
      return existing;
    }

    return this.createDefaultFunnel(owner_id);
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≤–æ—Ä–æ–Ω–∫—É –∏–∑ DTO
   */
  async create(dto: CreateFunnelDto): Promise<SalesFunnel> {
    const funnel = this.funnelRepository.create(dto);
    const savedFunnel = await this.funnelRepository.save(funnel);

    await this.createDefaultStages(savedFunnel.funnel_id);

    return savedFunnel;
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ —ç—Ç–∞–ø—ã –¥–ª—è –≤–æ—Ä–æ–Ω–∫–∏
   */
  async createDefaultStages(funnel_id: number) {
    const stages = [
      { stage_name: '–ü–µ—Ä–≤–∏—á–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç', is_closed: false, is_won: false },
      { stage_name: '–ü–µ—Ä–µ–≥–æ–≤–æ—Ä—ã', is_closed: false, is_won: false },
      { stage_name: '–ü—Ä–∏–Ω–∏–º–∞—é—Ç —Ä–µ—à–µ–Ω–∏–µ', is_closed: false, is_won: false },
      { stage_name: '–£—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞', is_closed: true, is_won: true },
      { stage_name: '–ó–∞–∫—Ä—ã—Ç–∞ –∏ –Ω–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞', is_closed: true, is_won: false },
    ];

    for (const [index, stage] of stages.entries()) {
      await this.funnelStageService.create(funnel_id, {
        stage_name: stage.stage_name,
        is_closed: stage.is_closed,
        is_won: stage.is_won,
        position: index + 1,
      });
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –æ–±—â—É—é –≤–æ—Ä–æ–Ω–∫—É
   */
  async getDefaultSharedFunnel(): Promise<SalesFunnel> {
    let sharedFunnel = await this.funnelRepository.findOne({
      where: { is_shared: true },
    });

    if (!sharedFunnel) {
      sharedFunnel = this.funnelRepository.create({
        funnel_name: '–û–±—â–∞—è –≤–æ—Ä–æ–Ω–∫–∞',
        is_shared: true,
        owner_id: null,
      });

      sharedFunnel = await this.funnelRepository.save(sharedFunnel);
      await this.createDefaultStages(sharedFunnel.funnel_id);
    }

    return sharedFunnel;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ–±—â–∏–µ –≤–æ—Ä–æ–Ω–∫–∏
   */
  async getSharedFunnels(): Promise<SalesFunnel[]> {
    return this.funnelRepository.find({
      where: { is_shared: true },
    });
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤–æ—Ä–æ–Ω–∫—É –ø–æ ID
   */
  async findOne(id: number): Promise<SalesFunnel | null> {
    const funnel = await this.funnelRepository.findOneBy({ funnel_id: id });
    if (!funnel) {
      throw new Error(`–í–æ—Ä–æ–Ω–∫–∞ —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
    }
    return funnel;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≤–æ—Ä–æ–Ω–∫–∏
   */
  async findAll(): Promise<SalesFunnel[]> {
    return this.funnelRepository.find();
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤–æ—Ä–æ–Ω–∫–∏ –ø–æ owner_id
   */
  async getFunnelsByOwnerId(owner_id: number): Promise<SalesFunnel[]> {
    return this.funnelRepository.find({
      where: { owner_id },
    });
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤–æ—Ä–æ–Ω–∫–∏ –ø–æ user_id (–¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞)
   */
  async getFunnelsByUserId(userId: number): Promise<SalesFunnel[]> {
    return this.funnelRepository.find({
      where: { owner_id: userId },
    });
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –≤–æ—Ä–æ–Ω–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async createDefaultFunnel(owner_id: number): Promise<SalesFunnel> {
    const funnel = this.funnelRepository.create({
      funnel_name: '–ú–æ—è –≤–æ—Ä–æ–Ω–∫–∞',
      owner_id,
      is_shared: false,
    });

    const savedFunnel = await this.funnelRepository.save(funnel);
    await this.createDefaultStages(savedFunnel.funnel_id);

    return savedFunnel;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —ç—Ç–∞–ø—ã –≤–æ—Ä–æ–Ω–∫–∏
   */
  async getStagesForFunnel(funnel_id: number): Promise<SalesFunnelStage[]> {
    return this.funnelStageRepository.find({
      where: { funnel_id },
      order: { position: 'ASC' },
    });
  }
}